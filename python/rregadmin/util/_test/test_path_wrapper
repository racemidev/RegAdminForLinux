#! /usr/bin/env python

import unittest

TRUE = 1
FALSE = 0

try:
    import rra_test_utils
except:
    import sys
    sys.path = sys.path + [ "../../..", "../../../TEST/lib" ]
    import rra_test_utils

from rregadmin.util.path_wrapper import *
from rregadmin.util.path_info_wrapper import *
from rregadmin.util.ustring_wrapper import *

class TestPathWrapper(rra_test_utils.RraTestCase):

    def test_new_empty(self):

        path1 = rra_path_new_unix("")

        self.assertNotEqual(None, path1)
        self.assertEqual(0, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual(".", rra_path_dirname(path1))
        self.assertEqual("", rra_path_basename(path1))
        self.assertEqual("", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_free(path1))

        return

    def test_new_absolute(self):

        path1 = rra_path_new_unix("/")

        self.assertNotEqual(None, path1)
        self.assertEqual(0, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_relative(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("/", rra_path_dirname(path1))
        self.assertEqual("", rra_path_basename(path1))
        self.assertEqual("/", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_free(path1))

        return

    def test_new_simple1(self):

        path1 = rra_path_new_unix("foo")

        self.assertNotEqual(None, path1)
        self.assertEqual(1, rra_path_number_of_parts(path1))
        self.assertTrueNum(ustr_equal(ustr_create("foo"),
                                      rra_path_get_part(path1, 0)))
        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual(".", rra_path_dirname(path1))
        self.assertEqual("foo", rra_path_basename(path1))
        self.assertEqual("foo", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_free(path1))

        return

    def test_new_simple2(self):

        path1 = rra_path_new_unix("foo/foo")

        self.assertNotEqual(None, path1)
        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertTrueNum(ustr_equal(ustr_create("foo"),
                                      rra_path_get_part(path1, 0)))
        self.assertTrueNum(ustr_equal(ustr_create("foo"),
                                      rra_path_get_part(path1, 1)))
        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual("foo", rra_path_dirname(path1))
        self.assertEqual("foo", rra_path_basename(path1))
        self.assertEqual("foo/foo", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_free(path1))

        return

    def test_parse1(self):

        tdata1 =[
            [ "./foo/.", False, [ ".", "foo", "." ] ],
            [ "  foo / bar \\ bbbb", False, [ "  foo ", " bar ", " bbbb" ] ],
            [ "\\HKEY_LOCAL_MACHINE\\software\\Microsoft\\Internet Explorer\\ActiveX Compatibility\\{00000566-0000-0010-8000-00AA006D2EA4}\\Compatibility Flags",
              True,
              [ "HKEY_LOCAL_MACHINE",
                "software",
                "Microsoft",
                "Internet Explorer",
                "ActiveX Compatibility",
                "{00000566-0000-0010-8000-00AA006D2EA4}",
                "Compatibility Flags" ] ],
            [ "/foo", True, [ "foo" ] ],
            [ "foo", False, [ "foo" ] ],
            ]

        path1 = rra_path_new_full("", RRA_PATH_OPT_MIX)

        for texample in tdata1:

            self.assertTrueNum(rra_path_parse(path1, texample[0]),
                               texample[0])
            if texample[1]:
                self.assertTrueNum(rra_path_is_absolute(path1),
                                   texample[0])
                self.assertFalseNum(rra_path_is_relative(path1),
                                    texample[0])
            else:
                self.assertFalseNum(rra_path_is_absolute(path1),
                                    texample[0])
                self.assertTrueNum(rra_path_is_relative(path1),
                                   texample[0])

            self.assertEqual(len(texample[2]),
                             rra_path_number_of_parts(path1),
                             texample[0])

            for index in xrange(0, len(texample[2])):
                self.assertTrueNum(
                    ustr_equal(ustr_create(texample[2][index]),
                               rra_path_get_part(path1, index)),
                    texample[0])

        self.assertTrueNum(rra_path_free(path1))

        return

    def test_parse_winmode1(self):

        tdata1 =[
            [ ".\\foo\\.", False, [ ".", "foo", "." ] ],
            [ "  foo / bar \\ bbbb", False, [ "  foo / bar ", " bbbb" ] ],
            [ "\\HKEY_LOCAL_MACHINE\\software\\Microsoft\\Internet Explorer\\ActiveX Compatibility\\{00000566-0000-0010-8000-00AA006D2EA4}\\Compatibility Flags",
              True,
              [ "HKEY_LOCAL_MACHINE",
                "software",
                "Microsoft",
                "Internet Explorer",
                "ActiveX Compatibility",
                "{00000566-0000-0010-8000-00AA006D2EA4}",
                "Compatibility Flags" ] ],
            [ "\\foo", True, [ "foo" ] ],
            [ "/foo", False, [ "/foo" ] ],
            [ "foo", False, [ "foo" ] ],
            ]

        path1 = rra_path_new_full("", RRA_PATH_OPT_WIN)

        for texample in tdata1:

            self.assertTrueNum(rra_path_parse(path1, texample[0]),
                               texample[0])
            if texample[1]:
                self.assertTrueNum(rra_path_is_absolute(path1),
                                   texample[0])
                self.assertFalseNum(rra_path_is_relative(path1),
                                    texample[0])
            else:
                self.assertFalseNum(rra_path_is_absolute(path1),
                                    texample[0])
                self.assertTrueNum(rra_path_is_relative(path1),
                                   texample[0])

            self.assertEqual(len(texample[2]),
                             rra_path_number_of_parts(path1))

            for index in xrange(0, len(texample[2])):
                self.assertTrueNum(
                    ustr_equal(ustr_create(texample[2][index]),
                               rra_path_get_part(path1, index)))

        self.assertTrueNum(rra_path_free(path1))

        return

    def test_new_full_win_delim1(self):

        path1 = rra_path_new_full("foo/bar",
                                  RRA_PATH_OPT_OUT_WIN_DELIMITER
                                  | RRA_PATH_OPT_IN_UNIX_DELIMITER
                                  | RRA_PATH_OPT_IN_WIN_DELIMITER)
        self.assertNotEqual(None, path1)
        self.assertEqual(2, rra_path_number_of_parts(path1))
        foo_str = ustr_create("foo")
        p1_str = rra_path_get_part(path1, 0)
        print "p1_str: %s; foo_str: %s" % (p1_str, foo_str)
        self.assertTrueNum(ustr_equal(foo_str, p1_str))
        self.assertTrueNum(ustr_equal(ustr_create("bar"),
                                      rra_path_get_part(path1, 1)))

        self.assertEqual("\\", rra_path_get_delimiter(path1))

        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual("foo", rra_path_dirname(path1))
        self.assertEqual("bar", rra_path_basename(path1))
        self.assertEqual("foo\\bar", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_free(path1))
        return


    def test_clear1(self):

        path1 = rra_path_new_unix("foo/bar/baz")

        self.assertNotEqual(None, path1)
        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertEqual(3, rra_path_number_of_parts(path1))

        self.assertTrueNum(rra_path_clear(path1))
        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertEqual(0, rra_path_number_of_parts(path1))

        path2 = rra_path_new_unix("/baz/bar")

        self.assertNotEqual(None, path2)
        self.assertTrueNum(rra_path_is_absolute(path2))
        self.assertEqual(2, rra_path_number_of_parts(path2))

        self.assertTrueNum(rra_path_clear(path2))
        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertEqual(0, rra_path_number_of_parts(path1))

        rra_path_free(path1)
        rra_path_free(path2)

        return


    def test_set1(self):

        path1 = rra_path_new_unix("foo/bar/baz")

        self.assertNotEqual(None, path1)
        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertEqual(3, rra_path_number_of_parts(path1))

        path2 = rra_path_new_unix("/baz/bar")

        self.assertNotEqual(None, path2)
        self.assertTrueNum(rra_path_is_absolute(path2))
        self.assertEqual(2, rra_path_number_of_parts(path2))

        self.assertTrueNum(rra_path_set(path1, path2))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual(2, rra_path_number_of_parts(path1))

        rra_path_free(path1)
        rra_path_free(path2)

        return


    def test_normalize1(self):

        path1 = rra_path_new_unix("foo\\nfoo")
        self.assertNotEqual(None, path1)
        self.assertEqual(1, rra_path_number_of_parts(path1))
        self.assertEqual("foo\\nfoo",
                         rra_path_as_str(path1))

        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertTrueNum(ustr_equal(ustr_create("foo\\nfoo"),
                                      rra_path_get_part(path1, 0)))

        self.assertTrueNum(rra_path_normalize(path1))

        self.assertEqual(1, rra_path_number_of_parts(path1))

        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertTrueNum(ustr_equal(ustr_create("foo\\nfoo"),
                                      rra_path_get_part(path1, 0)))

        self.assertTrueNum(rra_path_free(path1))

        return


    def test_normalize2(self):

        tdata1 = [
            [ "./foo/.", False, [ ".", "foo", "." ], [ "foo" ], "foo" ],
            [ "/./foo/.", True, [ ".", "foo", "." ], [ "foo" ], "/foo"],
            [ "/./././././././.", True,
              [ ".", ".", ".", ".", ".", ".", ".", "." ], [], "/" ],
            [ "././././././././.", False,
              [ ".", ".", ".", ".", ".", ".", ".", ".", "." ], [], "" ],
            [ "././././.bar/.foo/baz././.", False,
              [ ".", ".", ".", ".", ".bar", ".foo", "baz.", ".", "." ],
              [ ".bar", ".foo", "baz." ], ".bar/.foo/baz." ],

            [ "../foo", False, [ "..", "foo" ], [ "..", "foo" ], "../foo" ],
            [ "../foo/..", False, [ "..", "foo", ".." ], [ ".." ], ".." ],
            [ "/../foo/..", True, [ "..", "foo", ".." ], [], "/" ],

            [ "foo", False, [ "foo" ], [ "foo" ], "foo"]
        ]

        for texample in tdata1:

            path1 = rra_path_new_unix(texample[0])
            self.assertNotEqual(None, path1)

            if texample[1]:
                self.assertFalseNum(rra_path_is_relative(path1))
                self.assertTrueNum(rra_path_is_absolute(path1))
            else:
                self.assertTrueNum(rra_path_is_relative(path1))
                self.assertFalseNum(rra_path_is_absolute(path1))

            self.assertEqual(len(texample[2]),
                             rra_path_number_of_parts(path1))

            for i in xrange(0, len(texample[2])):
                self.assertTrueNum(ustr_equal(ustr_create(texample[2][i]),
                                              rra_path_get_part(path1, i)))

            self.assertEqual(texample[0], rra_path_as_str(path1))

            self.assertTrueNum(rra_path_normalize(path1))

            if texample[1]:
                self.assertFalseNum(rra_path_is_relative(path1))
                self.assertTrueNum(rra_path_is_absolute(path1))
            else:
                self.assertTrueNum(rra_path_is_relative(path1))
                self.assertFalseNum(rra_path_is_absolute(path1))


            self.assertEqual(len(texample[3]),
                             rra_path_number_of_parts(path1))

            for i in xrange(0, len(texample[3])):
                self.assertTrueNum(ustr_equal(ustr_create(texample[3][i]),
                                              rra_path_get_part(path1, i)))

            self.assertEqual(texample[4], rra_path_as_str(path1))

            self.assertTrueNum(rra_path_free(path1))

        return


    def test_add1(self):

        path1 = rra_path_new_unix("foo/foo")
        self.assertNotEqual(None, path1)
        path2 = rra_path_new_unix("bar")

        self.assertTrueNum(rra_path_add(path1, path2))

        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_relative(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual("foo/foo", rra_path_dirname(path1))
        self.assertEqual("bar", rra_path_basename(path1))
        self.assertEqual("foo/foo/bar", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_free(path1))
        self.assertTrueNum(rra_path_free(path2))

        return


    def test_add2(self):

        path1 = rra_path_new_unix("foo/foo")
        self.assertNotEqual(None, path1)
        path2 = rra_path_new_unix("/bar")

        self.assertFalseNum(rra_path_add(path1, path2))

        self.assertTrueNum(rra_path_free(path1))
        self.assertTrueNum(rra_path_free(path2))

        return


    def test_add3(self):

        path1 = rra_path_new_unix("/foo/foo")
        self.assertNotEqual(None, path1)
        path2 = rra_path_new_unix("bar")

        self.assertTrueNum(rra_path_add(path1, path2))

        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_relative(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("/foo/foo", rra_path_dirname(path1))
        self.assertEqual("bar", rra_path_basename(path1))
        self.assertEqual("/foo/foo/bar", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_free(path1))
        self.assertTrueNum(rra_path_free(path2))

        return


    def test_compare1(self):

        tdata1 = [
            [ "/./foo", "/foo", 0 ],
            [ "/foo", "foo", 1 ],
            [ "/foo/bar/..", "/foo", 0 ],
            [ "/foo", "/foo/bar", -1 ],

            [ "foo", "foo", 0 ]
        ]

        for texample in tdata1:

            p1 = rra_path_new_unix(texample[0])
            p2 = rra_path_new_unix(texample[1])

            if texample[2] == 0:
                self.assertEqual(0, rra_path_compare(p1, p2))
                self.assertTrueNum(rra_path_equal(p1, p2))
            elif texample[2] > 0:
                self.assert_(0 <rra_path_compare(p1, p2))
                self.assertTrueNum(rra_path_less(p2, p1))
            elif texample[2] < 0:
                self.assert_(0 > rra_path_compare(p1, p2))
                self.assertTrueNum(rra_path_less(p1, p2))

            rra_path_free(p2)
            rra_path_free(p1)

        return


    def test_subpath1(self):

        tdata1 = [
            [ "/./foo", "/foo", TRUE, "" ],
            [ "/foo", "foo", FALSE ],
            [ "/foo/bar/..", "/foo", TRUE, "" ],
            [ "/foo", "/foo/bar", TRUE, "bar" ],

            [ "foo", "foo", TRUE, "" ]
            ]

        for texample in tdata1:

            p1 = rra_path_new_unix(texample[0])
            p2 = rra_path_new_unix(texample[1])

            self.assertEqual(texample[2],
                             rra_path_is_subpath(p1, p2))

            if texample[2] == TRUE:

                sp1 = rra_path_new_unix(texample[3])
                self.assertNotEqual(None, sp1)

                sp2 = rra_path_make_subpath(p1, p2)
                self.assertNotEqual(None, sp2)

                self.assertTrueNum(rra_path_equal(sp1, sp2))

                rra_path_free(sp2)
                rra_path_free(sp1)

            rra_path_free(p2)
            rra_path_free(p1)

        return


    def test_subpath2(self):

        tdata1 = [
            [ "\\.\\foo", "\\foo", TRUE, "" ],
            [ "\\foo", "foo", FALSE, "" ],
            [ "\\foo\\bar\\..", "\\foo", TRUE, "" ],
            [ "\\foo", "\\foo\\bar", TRUE, "bar" ],

            [ "foo", "foo", TRUE, "" ]
        ]

        for texample in tdata1:

            p1 = rra_path_new_full(texample[0], RRA_PATH_OPT_MIX)
            p2 = rra_path_new_full(texample[1], RRA_PATH_OPT_MIX)

            self.assertEqual(texample[2], rra_path_is_subpath(p1, p2))

            if texample[2] == 1:

                sp1 = rra_path_new_full(texample[3], RRA_PATH_OPT_MIX)
                self.assertNotEqual(None, sp1)

                sp2 = rra_path_make_subpath(p1, p2)
                self.assertNotEqual(None, sp2)

                self.assertTrueNum(rra_path_equal(sp1, sp2))

                rra_path_free(sp2)
                rra_path_free(sp1)

            rra_path_free(p2)
            rra_path_free(p1)

        return


    def test_subpath_case_insensitive1(self):

        tdata1 = [
            [ "/./foo", "/Foo", TRUE, "" ],
            [ "/foo", "foo", FALSE, "" ],
            [ "/fOo/bar/..", "/FoO", TRUE, "" ],
            [ "/foO", "/foo/bar", TRUE, "bar" ],

            [ "fOO", "foo", TRUE, ""]
            ]

        for texample in tdata1:

            p1 = rra_path_new_full(texample[0],
                                   RRA_PATH_OPT_UNIX |
                                   RRA_PATH_OPT_CASE_INSENSITIVE)
            p2 = rra_path_new_full(texample[1],
                                   RRA_PATH_OPT_UNIX |
                                   RRA_PATH_OPT_CASE_INSENSITIVE)

            self.assertEqual(texample[2], rra_path_is_subpath(p1, p2))

            if texample[2] == 1:

                sp1 = rra_path_new_full(texample[3],
                                        RRA_PATH_OPT_CASE_INSENSITIVE)
                self.assertNotEqual(None, sp1)

                sp2 = rra_path_make_subpath(p1, p2)
                self.assertNotEqual(None, sp2)

                self.assertTrueNum(rra_path_equal(sp1, sp2))

                rra_path_free(sp2)
                rra_path_free(sp1)

            rra_path_free(p2)
            rra_path_free(p1)

        return


    def test_subpath_case_insensitive2(self):

        tdata1 = [
            [ "\\.\\foo", "\\Foo", TRUE, "" ],
            [ "\\foo", "foo", FALSE, "" ],
            [ "\\fOo", "\\FoO\\bar", TRUE, "bar" ],
            [ "\\foO\\bar", "\\foo\\bar\\baz", TRUE, "baz" ],

            [ "fOO", "foo", TRUE, "" ]
        ]

        for texample in tdata1:

            p1 = rra_path_new_full(texample[0], RRA_PATH_OPT_MIX)
            p2 = rra_path_new_full(texample[1], RRA_PATH_OPT_MIX)

            self.assertEqual(texample[2], rra_path_is_subpath(p1, p2))

            if texample[2] == 1:

                sp1 = rra_path_new_full(texample[3], RRA_PATH_OPT_MIX)
                self.assertNotEqual(None, sp1)

                sp2 = rra_path_make_subpath(p1, p2)
                self.assertNotEqual(None, sp2)

                self.assertTrueNum(rra_path_equal(sp1, sp2))

                rra_path_free(sp2)
                rra_path_free(sp1)

            rra_path_free(p2)
            rra_path_free(p1)

        return


    def test_trim_front1(self):

        tdata1 = [
            [ "/foo/bar/baz", "foo/bar/baz", TRUE, 1 ],

            [ "", "", FALSE, 1 ],
            [ "/", "", TRUE, 1 ],
            [ "/foo/bar", "/foo/bar", FALSE, 4 ],
            [ "/foo/bar", "/foo/bar", FALSE, 10 ],
            [ "/foo/bar", "/foo/bar", FALSE, 20 ],
            [ "/foo/bar", "/foo/bar", FALSE, 100 ],
            [ "/foo/bar", "", TRUE, 3 ],

            [ "bar/baz/foo", "bar/baz/foo", TRUE, 0 ],
            [ "bar/baz/foo", "baz/foo", TRUE, 1 ],
            [ "bar/baz/foo", "foo", TRUE, 2 ],
            [ "bar/baz/foo", "", TRUE, 3 ],
            [ "bar/baz/foo", "bar/baz/foo", FALSE, 4 ],

            [ "foo", "", TRUE, 1 ]
        ]

        for texample in tdata1:

            p1 = rra_path_new_unix(texample[0])
            self.assertNotEqual(None, p1)

            p2 = rra_path_copy(p1)

            if texample[2] == TRUE:

                self.assertTrueNum(
                    rra_path_trim_front(p2, texample[3]))

                if rra_path_is_absolute(p1) == TRUE:

                    self.assertEqual(
                        rra_path_number_of_parts(p1) - texample[3] + 1,
                        rra_path_number_of_parts(p2))

                    self.assertTrueNum(rra_path_is_relative(p2))
                    self.assertFalseNum(rra_path_is_absolute(p2))
                else:
                    self.assertEqual(
                        rra_path_number_of_parts(p1) - texample[3],
                        rra_path_number_of_parts(p2))

                self.assertEqual(texample[1], rra_path_as_str(p2))
            else:

                self.assertFalseNum(
                    rra_path_trim_front(p2, texample[3]))

        return


    def test_trim_back1(self):

        tdata1 = [
            [ "/foo/bar/baz", "/foo/bar", TRUE, 1 ],

            [ "", "", FALSE, 1 ],
            [ "/", "", TRUE, 1 ],
            [ "/foo/bar", "/foo/bar", FALSE, 4 ],
            [ "/foo/bar", "/foo/bar", FALSE, 10 ],
            [ "/foo/bar", "/foo/bar", FALSE, 20 ],
            [ "/foo/bar", "/foo/bar", FALSE, 100 ],
            [ "/foo/bar", "", TRUE, 3 ],
            [ "/foo/bar", "/", TRUE, 2 ],
            [ "/foo/bar", "/foo", TRUE, 1 ],

            [ "bar/baz/foo", "bar/baz/foo", TRUE, 0 ],
            [ "bar/baz/foo", "bar/baz", TRUE, 1 ],
            [ "bar/baz/foo", "bar", TRUE, 2 ],
            [ "bar/baz/foo", "", TRUE, 3 ],
            [ "bar/baz/foo", "bar/baz/foo", FALSE, 4 ],

            [ "foo", "", TRUE, 1 ]
        ]

        for texample in tdata1:

            p1 = rra_path_new_unix(texample[0])
            self.assertNotEqual(None, p1)

            p2 = rra_path_copy(p1)

            if texample[2] == TRUE:

                self.assertTrueNum(rra_path_trim_back(p2, texample[3]))

                if rra_path_is_absolute(p1) == TRUE:

                    if texample[3] > rra_path_number_of_parts(p1):
                        self.assertEqual(0, rra_path_number_of_parts(p2))
                        self.assertTrueNum(rra_path_is_relative(p2))
                        self.assertFalseNum(rra_path_is_absolute(p2))
                    else:
                        self.assertEqual(
                            rra_path_number_of_parts(p1) - texample[3],
                            rra_path_number_of_parts(p2))
                else:
                    self.assertEqual(
                        rra_path_number_of_parts(p1) - texample[3],
                        rra_path_number_of_parts(p2))

                self.assertEqual(texample[1], rra_path_as_str(p2))
            else:
                self.assertFalseNum(rra_path_trim_back(p2, texample[3]))

            rra_path_free(p1)
            rra_path_free(p2)

        return


    def test_append1(self):

        path1 = rra_path_new_unix("/foo/foo")
        self.assertNotEqual(None, path1)

        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))

        self.assertTrueNum(rra_path_append_part(path1, "baz"))
        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("/foo/foo/baz", rra_path_as_str(path1))

        rra_path_free(path1)

        return


    def test_append2(self):

        path1 = rra_path_new_unix("/foo/foo")

        self.assertNotEqual(None, path1)

        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))

        self.assertFalseNum(rra_path_append_part(path1, ""))
        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("/foo/foo", rra_path_as_str(path1))

        self.assertFalseNum(rra_path_append_part(path1, "bla/boo"))
        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("/foo/foo", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_append_part(path1, "bla\\boo"))
        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("/foo/foo/bla\\boo", rra_path_as_str(path1))

        self.assertFalseNum(rra_path_append_part(path1, None))
        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("/foo/foo/bla\\boo", rra_path_as_str(path1))

        self.assertFalseNum(rra_path_append_part(None, "foo"))

        rra_path_free(path1)

        return


    def test_prepend1(self):

        path1 = rra_path_new_unix("foo/foo")

        self.assertNotEqual(None, path1)

        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))

        self.assertTrueNum(rra_path_prepend_part(path1, "baz"))
        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual("baz/foo/foo", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_prepend_part(path1, "/"))
        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("/baz/foo/foo", rra_path_as_str(path1))

        self.assertFalseNum(rra_path_prepend_part(path1, "bee"))
        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("/baz/foo/foo", rra_path_as_str(path1))

        rra_path_free(path1)

        return


    def test_prepend2(self):

        path1 = rra_path_new_full("foo/foo", RRA_PATH_OPT_MIX)

        self.assertNotEqual(None, path1)

        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))

        self.assertTrueNum(rra_path_prepend_part(path1, "baz"))
        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual("baz\\foo\\foo", rra_path_as_str(path1))

        self.assertTrueNum(rra_path_prepend_part(path1, "\\"))
        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("\\baz\\foo\\foo", rra_path_as_str(path1))

        self.assertFalseNum(rra_path_prepend_part(path1, "bee"))
        self.assertEqual(3, rra_path_number_of_parts(path1))
        self.assertTrueNum(rra_path_is_absolute(path1))
        self.assertEqual("\\baz\\foo\\foo", rra_path_as_str(path1))

        rra_path_free(path1)

        return


    def test_prepend3(self):

        path1 = rra_path_new_full("foo/foo", RRA_PATH_OPT_MIX)
        self.assertNotEqual(None, path1)

        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))

        self.assertFalseNum(rra_path_prepend_part(path1, ""))
        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual("foo\\foo", rra_path_as_str(path1))

        self.assertFalseNum(rra_path_prepend_part(path1, "bla/boo"))
        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual("foo\\foo", rra_path_as_str(path1))

        self.assertFalseNum(rra_path_prepend_part(path1, "bla\\boo"))
        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual("foo\\foo", rra_path_as_str(path1))

        self.assertFalseNum(rra_path_prepend_part(path1, None))
        self.assertEqual(2, rra_path_number_of_parts(path1))
        self.assertFalseNum(rra_path_is_absolute(path1))
        self.assertEqual("foo\\foo", rra_path_as_str(path1))

        self.assertFalseNum(rra_path_prepend_part(None, "foo"))

        rra_path_free(path1)
        return


    def test_default1(self):

        path1 = rra_path_new_full("\\HKEY_LOCAL_MACHINE\\system",
                                  RRA_PATH_OPT_MIX)
        path2 = rra_path_new_full("\\HKEY_LOCAL_MACHINE\\System",
                                  RRA_PATH_OPT_MIX)

        self.assertTrueNum(rra_path_equal(path1, path2))

        return


if __name__ == '__main__':
    rra_test_utils.main()
